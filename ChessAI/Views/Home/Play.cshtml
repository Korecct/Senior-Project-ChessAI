@model ChessAI.Models.Game
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chess Game</title>
    <style>
        .chess-board-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .chess-board {
            display: grid;
            grid-template-columns: repeat(8, 70px);
            grid-template-rows: repeat(8, 70px);
            gap: 0;
            border: 2px solid #000;
        }

        .chess-square {
            width: 70px;
            height: 70px;
            position: relative;
        }

        .black {
            background-color: #769656;
        }

        .white {
            background-color: #eeeed2;
        }

        .chess-piece {
            font-size: 50px;
            text-align: center;
            line-height: 70px;
            cursor: grab;
        }

        .chess-piece:active {
            cursor: grabbing;
        }

        .chess-square.drag-over {
            outline: 2px dashed #000;
        }
    </style>
</head>
<body>
    <input type="hidden" id="RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(Context).RequestToken" />

    <div class="chess-board-container">
        <div class="chess-board">
            @for (int row = 0; row < 8; row++)
            {
                @for (int col = 0; col < 8; col++)
                {
                    var isBlack = (row + col) % 2 == 0;
                    var className = isBlack ? "black" : "white";
                    var piece = Model.Board.Squares[row, col];
                    var pieceSymbol = "";
                    if (piece != null)
                    {
                        pieceSymbol = GetPieceSymbol(piece);
                    }
                    <div class="chess-square @className" data-row="@row" data-col="@col" data-drop-target="true">
                        @if (!string.IsNullOrEmpty(pieceSymbol))
                        {
                            <div class="chess-piece" draggable="true" data-piece="@pieceSymbol" data-row="@row" data-col="@col">
                                @pieceSymbol
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <script>
let draggedPiece = null;
const isWhiteTurn = @Model.IsWhiteTurn.ToString().ToLower();

function dragStart(event) {
    if (event.target.classList.contains('chess-piece')) {
        const pieceColor = event.target.getAttribute('data-piece-color');

        if ((isWhiteTurn && pieceColor !== 'white') || (!isWhiteTurn && pieceColor !== 'black')) {
            event.preventDefault(); // Prevent dragging opponent's pieces
            return;
        }

        draggedPiece = event.target;
        event.dataTransfer.setData('text/plain', null); // For Firefox compatibility
        console.log('dragstart event fired');
    }
}

function allowDrop(event) {
    if (event.target.classList.contains('chess-square')) {
        event.preventDefault(); // Allow drop
        console.log('dragover event fired');
    }
}

function drop(event) {
    event.preventDefault();
    if (event.target.classList.contains('chess-square')) {
        console.log('drop event fired');
        const fromRow = parseInt(draggedPiece.getAttribute('data-row'));
        const fromCol = parseInt(draggedPiece.getAttribute('data-col'));
        const toRow = parseInt(event.target.getAttribute('data-row'));
        const toCol = parseInt(event.target.getAttribute('data-col'));

        postMove(fromRow, fromCol, toRow, toCol);
    }
}


        document.addEventListener('dragenter', function (event) {
            if (event.target.classList.contains('chess-square')) {
                event.target.classList.add('drag-over');
            }
        });

        document.addEventListener('dragleave', function (event) {
            if (event.target.classList.contains('chess-square')) {
                event.target.classList.remove('drag-over');
            }
        });

        document.addEventListener('dragend', function (event) {
            document.querySelectorAll('.chess-square.drag-over').forEach(el => el.classList.remove('drag-over'));
        });

        function postMove(fromRow, fromCol, toRow, toCol) {
            fetch('/Game/MakeMove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementById('RequestVerificationToken').value
                },
                body: JSON.stringify({ fromRow, fromCol, toRow, toCol })
            }).then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Invalid move');
                }
            });
        }
    </script>

    @functions {
        private string GetPieceSymbol(Piece piece)
        {
            if (piece is Pawn)
                return piece.IsWhite ? "♙" : "♟";
            else if (piece is Rook)
                return piece.IsWhite ? "♖" : "♜";
            else if (piece is Knight)
                return piece.IsWhite ? "♘" : "♞";
            else if (piece is Bishop)
                return piece.IsWhite ? "♗" : "♝";
            else if (piece is Queen)
                return piece.IsWhite ? "♕" : "♛";
            else if (piece is King)
                return piece.IsWhite ? "♔" : "♚";
            else
                return "";
        }
    }
</body>
</html>
