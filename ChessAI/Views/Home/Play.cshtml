@model ChessAI.Models.Game
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chess Game</title>
</head>
<body>
    <input type="hidden" id="RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(ViewContext.HttpContext).RequestToken" />

    <div class="chess-board-container">
        <div class="chess-board" id="chessBoard">
            @for (int row = 0; row < 8; row++)
            {
                @for (int col = 0; col < 8; col++)
                {
                    var isBlack = (row + col) % 2 == 0;
                    var className = isBlack ? "black" : "white";
                    var piece = Model.Board.Squares[row][col];
                    var pieceSymbol = "";
                    if (piece != null)
                    {
                        pieceSymbol = GetPieceSymbol(piece);
                    }
                    <div class="chess-square @className"
                         data-row="@row" data-col="@col"
                         onclick="squareClick(event)">
                        @if (!string.IsNullOrEmpty(pieceSymbol))
                        {
                            <div class="chess-piece"
                                 data-piece="@pieceSymbol" data-row="@row" data-col="@col"
                                 data-piece-color="@(piece.IsWhite ? "white" : "black")"
                                 onmousedown="pieceMouseDown(event)">
                                @pieceSymbol
                            </div>
                        }
                    </div>
                }
            }
        </div>

        <div class="gamemode-button-contatiner">
            <button type="button" class="gamemode-button" name="Tutorial">Tutorial</button>
            <button type="button" class="gamemode-button" name="PvP">Player vs Player</button>
            <button type="button" class="gamemode-button" name="PvAI">Player vs AI</button>
        </div>
    </div>

    <script>
        let selectedPiece = null;
        let offsetX, offsetY;
        let originalSquare = null;

        function pieceMouseDown(event) {
            if (@Model.IsGameOver.ToString().ToLower()) {
                // Prevent moving pieces if the game is over
                return;
            }
            const isWhiteTurn = @Model.IsWhiteTurn.ToString().ToLower();
            const pieceColor = event.target.getAttribute('data-piece-color');

            if ((isWhiteTurn === 'true' && pieceColor !== 'white') || (isWhiteTurn === 'false' && pieceColor !== 'black')) {
                // Not this player's turn
                return;
            }

            selectedPiece = event.target;
            originalSquare = selectedPiece.parentElement;

            // Get the mouse position relative to the piece
            const rect = selectedPiece.getBoundingClientRect();
            offsetX = event.clientX - rect.left;
            offsetY = event.clientY - rect.top;

            selectedPiece.style.zIndex = 1000;

            document.addEventListener('mousemove', documentMouseMove);
            document.addEventListener('mouseup', documentMouseUp);

            // Highlight possible moves
            const fromRow = parseInt(selectedPiece.getAttribute('data-row'));
            const fromCol = parseInt(selectedPiece.getAttribute('data-col'));

            getValidMoves(fromRow, fromCol);

            event.preventDefault();
        }

        function documentMouseMove(event) {
            if (selectedPiece) {
                moveAt(event.clientX, event.clientY);
            }
        }

        function moveAt(clientX, clientY) {
            const parentRect = originalSquare.getBoundingClientRect();

            const x = clientX - parentRect.left - offsetX;
            const y = clientY - parentRect.top - offsetY;

            selectedPiece.style.left = x + 'px';
            selectedPiece.style.top = y + 'px';
        }

        function documentMouseUp(event) {
            if (selectedPiece) {
                // Get the square under the cursor
                const elements = document.elementsFromPoint(event.clientX, event.clientY);
                const square = elements.find(el => el.classList.contains('chess-square'));

                if (square && square.classList.contains('highlight')) {
                    const fromRow = parseInt(selectedPiece.getAttribute('data-row'));
                    const fromCol = parseInt(selectedPiece.getAttribute('data-col'));
                    const toRow = parseInt(square.getAttribute('data-row'));
                    const toCol = parseInt(square.getAttribute('data-col'));

                    postMove(fromRow, fromCol, toRow, toCol);
                } else {
                    // Move back to original position
                    resetPiecePosition(selectedPiece);
                }

                clearHighlights();
                document.removeEventListener('mousemove', documentMouseMove);
                document.removeEventListener('mouseup', documentMouseUp);
                selectedPiece = null;
                originalSquare = null;
            }
        }

        function resetPiecePosition(piece) {
            piece.style.left = '';
            piece.style.top = '';
            piece.style.zIndex = '';
        }

        function squareClick(event) {
            if (!selectedPiece) {
                // No piece selected
                return;
            }

            const fromRow = parseInt(selectedPiece.getAttribute('data-row'));
            const fromCol = parseInt(selectedPiece.getAttribute('data-col'));
            const toRow = parseInt(event.currentTarget.getAttribute('data-row'));
            const toCol = parseInt(event.currentTarget.getAttribute('data-col'));

            // Only allow moving to highlighted squares
            if (!event.currentTarget.classList.contains('highlight')) {
                return;
            }

            postMove(fromRow, fromCol, toRow, toCol);
            clearHighlights();
            selectedPiece = null;
        }

        function getValidMoves(row, col) {
            fetch('/Home/GetValidMoves', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementById('RequestVerificationToken').value
                },
                body: JSON.stringify({ row: row, col: col })
            }).then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return Promise.reject('Failed to fetch valid moves.');
                }
            }).then(validMoves => {
                highlightValidMoves(validMoves);
            }).catch(error => {
                console.error('Error:', error);
            });
        }

        function highlightValidMoves(moves) {
            moves.forEach(move => {
                const row = move.Row !== undefined ? move.Row : move.row;
                const col = move.Col !== undefined ? move.Col : move.col;
                const selector = `.chess-square[data-row='${row}'][data-col='${col}']`;
                const square = document.querySelector(selector);
                if (square) {
                    square.classList.add('highlight');
                }
            });
        }

        function clearHighlights() {
            const highlightedSquares = document.querySelectorAll('.chess-square.highlight');
            highlightedSquares.forEach(square => {
                square.classList.remove('highlight');
            });
        }

        function playSound(event) {
            const soundElement = document.getElementById(`sound${event}`);
            if (soundElement) {
                soundElement.play();
            }
        }

        function playSound(event) {
            const soundElement = document.getElementById(`sound${event}`);
            if (soundElement) {
                soundElement.play();
            }
        }

        function postMove(fromRow, fromCol, toRow, toCol) {
            fetch('/Home/MakeMove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.getElementById('RequestVerificationToken').value
                },
                body: JSON.stringify({ fromRow, fromCol, toRow, toCol })
            }).then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return Promise.reject('Invalid move.');
                }
            }).then(response => {
                if (response.success) {
                    // Plays a sound based on specific events
                    if (response.isCheckmate) {
                        playSound('Checkmate');
                    } else if (response.isCheck) {
                        playSound('Check');
                    } else if (response.isCastle) {
                        playSound('Castle');
                    } else if (response.isCapture) {
                        playSound('Capture');
                    } else if (response.isPromotion) {
                        playSound('Promotion');
                    } else {
                        // If no other special event sound is played, then play the move sound
                        playSound('Move');
                    }

                    updateBoard();

                    if (response.isGameOver) {
                        if (response.gameResult.includes('wins')) {
                            playSound('Victory');
                        } else if (response.gameResult.includes('draw') || response.gameResult.includes('stalemate')) {
                            playSound('Stalemate');
                        } else {
                            playSound('Defeat');
                        }
                    }
                } else {
                    alert('Invalid move.');
                    resetPiecePosition(selectedPiece);
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('An error occurred while making the move.');
                resetPiecePosition(selectedPiece);
            });
        }

        function updateBoard() {
            fetch('/Home/Play')
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const updatedBoard = doc.getElementById('chessBoard');
                    const chessBoardContainer = document.getElementById('chessBoard');
                    chessBoardContainer.innerHTML = updatedBoard.innerHTML;
                }).catch(error => {
                    console.error('Error:', error);
                });
        }
    </script>

    @functions {
        private string GetPieceSymbol(Piece piece)
        {
            if (piece is Pawn)
                return piece.IsWhite ? "♙" : "♟";
            else if (piece is Rook)
                return piece.IsWhite ? "♖" : "♜";
            else if (piece is Knight)
                return piece.IsWhite ? "♘" : "♞";
            else if (piece is Bishop)
                return piece.IsWhite ? "♗" : "♝";
            else if (piece is Queen)
                return piece.IsWhite ? "♕" : "♛";
            else if (piece is King)
                return piece.IsWhite ? "♔" : "♚";
            else
                return "";
        }
    }

    <!-- Loads Sounds -->
    <audio id="soundMove" src="/sounds/move.mp3" preload="auto"></audio>
    <audio id="soundCheck" src="/sounds/check.mp3" preload="auto"></audio>
    <audio id="soundCheckmate" src="/sounds/checkmate.mp3" preload="auto"></audio>
    <audio id="soundCastle" src="/sounds/castle.mp3" preload="auto"></audio>
    <audio id="soundCapture" src="/sounds/capture.mp3" preload="auto"></audio>
    <audio id="soundPromotion" src="/sounds/promotion.mp3" preload="auto"></audio>
    <audio id="soundVictory" src="/sounds/victory.mp3" preload="auto"></audio>
    <audio id="soundStalemate" src="/sounds/stalemate.mp3" preload="auto"></audio>
    <audio id="soundDefeat" src="/sounds/defeat.mp3" preload="auto"></audio>

</body>
</html>
